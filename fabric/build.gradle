plugins {
    id "org.jetbrains.kotlin.jvm"
    id "org.jetbrains.gradle.plugin.idea-ext"
    id "architectury-plugin"
    id "dev.architectury.loom"
    id "com.github.johnrengelman.shadow"
    id "maven-publish"
}

evaluationDependsOn(":xplat")

group = project.maven_group

base {
    archivesName = project.archives_base_name
}

apply from: 'https://dblsaiko.net/pub/gradle/autoversion.gradle'

architectury {
    fabric()
}

loom {
    mods {
        create("hctm_base") {
            sourceSet(sourceSets.main)
            sourceSet(project(":xplat").sourceSets.main)
        }
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom(common)
    runtimeClasspath.extendsFrom(common)
    developmentFabric.extendsFrom(common)
}

repositories {
    maven { url 'https://maven.dblsaiko.net' }
    // maven { url 'https://maven.terraformersmc.com/releases/' }
    maven { url 'https://kneelawk.com/maven' }
}

dependencies {
    minecraft group: "com.mojang", name: "minecraft", version: minecraft_version
    mappings group: "net.fabricmc", name: "yarn", version: yarn_mappings, classifier: "v2"
    modImplementation group: "net.fabricmc", name: "fabric-loader", version: fabric_loader_version

    modImplementation group: "net.fabricmc.fabric-api", name: "fabric-api", version: fabric_version
    implementation(group: "net.fabricmc", name: "fabric-language-kotlin", version: fabric_kotlin_version) {
        exclude module: 'fabric-loader'
    }
    
    common(project(path: ":xplat", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":xplat", configuration: "transformProductionFabric")) { transitive false }

    modApi group: 'com.kneelawk.graphlib', name: 'core-fabric', version: graphlib_version
    include group: 'com.kneelawk.graphlib', name: 'core-fabric', version: graphlib_version

    modRuntimeOnly group: 'com.kneelawk.graphlib', name: 'debugrender-fabric', version: graphlib_version
    include group: 'com.kneelawk.graphlib', name: 'debugrender-fabric', version: graphlib_version
}

processResources {
    inputs.property 'version', project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar.configure {
    exclude "architectury.common.json"
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar.configure {
    dependsOn shadowJar
    inputFile.convention(shadowJar.archiveFile)
    injectAccessWidener = true
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions.jvmTarget = '17'
    kotlinOptions.freeCompilerArgs += '-Xuse-experimental=kotlin.ExperimentalUnsignedTypes'
    kotlinOptions.freeCompilerArgs += '-Xjvm-default=all'
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release = 17
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    withSourcesJar()
}

jar {
    from 'LICENSE'
}

sourcesJar.configure {
    def xplatSources = project(":xplat").tasks.sourcesJar
    dependsOn(xplatSources)
    from(zipTree(xplatSources.archiveFile))
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            from components.java
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

idea.project?.settings {
    delegateActions {
        delegateBuildRunToGradle = false
        testRunner = org.jetbrains.gradle.ext.ActionDelegationConfig.TestRunner.PLATFORM
    }
}

apply from: 'https://dblsaiko.net/pub/gradle/publish-slim.gradle'
